From c08f38212d5da05eb51ef1e5a693fe6e91d11109 Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@oslandia.com>
Date: Mon, 22 May 2017 15:04:12 +0200
Subject: [PATCH] Custom converter

---
 PotreeConverter/include/BINPointWriter.hpp | 71 +++++++++++++++++++++++++++++-
 PotreeConverter/src/PotreeConverter.cpp    | 28 ++++++------
 2 files changed, 84 insertions(+), 15 deletions(-)

diff --git a/PotreeConverter/include/BINPointWriter.hpp b/PotreeConverter/include/BINPointWriter.hpp
index 96abb10..9cf426e 100644
--- a/PotreeConverter/include/BINPointWriter.hpp
+++ b/PotreeConverter/include/BINPointWriter.hpp
@@ -30,6 +30,13 @@ public:
 	AABB aabb;
 	double scale;
 
+	std::vector<float> positions;
+	std::vector<unsigned char> colors;
+
+	struct {
+		float x, y, z;
+	} _min, _max;
+
 	BINPointWriter(string file, AABB aabb, double scale, PointAttributes pointAttributes) {
 		this->file = file;
 		this->aabb = aabb;
@@ -39,6 +46,8 @@ public:
 		attributes = pointAttributes;
 
 		writer = new ofstream(file, ios::out | ios::binary);
+
+
 	}
 
 	BINPointWriter(string file, PointAttributes attributes) {
@@ -53,11 +62,63 @@ public:
 		close();
 	}
 
+
 	void write(const Point &point){
 		for(int i = 0; i < attributes.size(); i++){
 			PointAttribute attribute = attributes[i];
 			if(attribute == PointAttribute::POSITION_CARTESIAN){
 				//float pos[3] = {(float) point.x,(float)  point.y,(float)  point.z};
+				// int x = (int)((point.position.x - aabb.min.x) / scale);
+				// int y = (int)((point.position.y - aabb.min.y) / scale);
+				// int z = (int)((point.position.z - aabb.min.z) / scale);
+				float x = ((point.position.x - aabb.min.x) / scale);
+				float y = ((point.position.y - aabb.min.y) / scale);
+				float z = ((point.position.z - aabb.min.z) / scale);
+
+				if (positions.size() == 0) {
+					_min.x = x; _min.y = y; _min.z = z;
+					_max.x = x; _max.y = y; _max.z = z;
+				} else {
+					_min.x = std::min(_min.x, x); _min.y = std::min(_min.y, y); _min.z = std::min(_min.z, z);
+					_max.x = std::max(_max.x, x); _max.y = std::max(_max.y, y); _max.z = std::max(_max.z, z);
+				}
+
+				positions.push_back(x);
+				positions.push_back(y);
+				positions.push_back(z);
+
+			}else if(attribute == PointAttribute::COLOR_PACKED){
+				unsigned char intensity = (unsigned char)(point.intensity);// / 255);
+				unsigned char rgba[4] = {intensity /*color.x*/, intensity /*point.color.y*/,intensity /*point.color.z*/, 255};
+				colors.push_back(rgba[0]);
+				colors.push_back(rgba[1]);
+				colors.push_back(rgba[2]);
+				colors.push_back(rgba[3]);
+			}else if(attribute == PointAttribute::INTENSITY){
+				// unsigned char i = (unsigned char)(255 * (point.intensity / 65535.0));
+				// colors.push_back(i);
+				// colors.push_back(i);
+				// colors.push_back(i);
+				// colors.push_back(i);
+			}else if(attribute == PointAttribute::CLASSIFICATION){
+				// throw;
+			}else if(attribute == PointAttribute::NORMAL_SPHEREMAPPED){
+				// throw;
+			}else if(attribute == PointAttribute::NORMAL_OCT16){
+				// throw;
+			}else if(attribute == PointAttribute::NORMAL){
+				// throw;
+			}
+		}
+
+		numPoints++;
+	}
+
+	void write2(const Point &point){
+		for(int i = 0; i < attributes.size(); i++){
+			PointAttribute attribute = attributes[i];
+			if(attribute == PointAttribute::POSITION_CARTESIAN){
+				//float pos[3] = {(float) point.x,(float)  point.y,(float)  point.z};
 				int x = (int)((point.position.x - aabb.min.x) / scale);
 				int y = (int)((point.position.y - aabb.min.y) / scale);
 				int z = (int)((point.position.z - aabb.min.z) / scale);
@@ -91,7 +152,7 @@ public:
 				float nx = point.normal.x;
 				float ny = point.normal.y;
 				float nz = point.normal.z;
-				
+
 				float norm1 = abs(nx) + abs(ny) + abs(nz);
 
 				nx = nx / norm1;
@@ -126,6 +187,14 @@ public:
 
 	void close(){
 		if(writer != NULL){
+			std::cout << "WRITING FOR REAL " << file << ':' << numPoints<<  ',' << (positions.size() / 3) << ',' << (colors.size() / 4) << std::endl;
+
+			writer->write((const char*)&_min, 3 * sizeof(int));
+			writer->write((const char*)&_max, 3 * sizeof(int));
+			writer->write((const char*)positions.data(), positions.size() * sizeof(int));
+			writer->write((const char*)colors.data(), colors.size() * sizeof(unsigned char));
+
+
 			writer->close();
 			delete writer;
 			writer = NULL;
diff --git a/PotreeConverter/src/PotreeConverter.cpp b/PotreeConverter/src/PotreeConverter.cpp
index 16397ad..f9f9bd7 100644
--- a/PotreeConverter/src/PotreeConverter.cpp
+++ b/PotreeConverter/src/PotreeConverter.cpp
@@ -83,8 +83,8 @@ void PotreeConverter::prepare(){
 				path pDirectoryEntry = it->path();
 				if(boost::filesystem::is_regular_file(pDirectoryEntry)){
 					string filepath = pDirectoryEntry.string();
-					if(boost::iends_with(filepath, ".las") 
-						|| boost::iends_with(filepath, ".laz") 
+					if(boost::iends_with(filepath, ".las")
+						|| boost::iends_with(filepath, ".laz")
 						|| boost::iends_with(filepath, ".xyz")
 						|| boost::iends_with(filepath, ".pts")
 						|| boost::iends_with(filepath, ".ptx")
@@ -124,7 +124,7 @@ AABB PotreeConverter::calculateAABB(){
 		for(string source : sources){
 
 			PointReader *reader = createPointReader(source, pointAttributes);
-			
+
 			AABB lAABB = reader->getAABB();
 			aabb.update(lAABB.min);
 			aabb.update(lAABB.max);
@@ -153,16 +153,16 @@ void PotreeConverter::generatePage(string name){
 		while(getline(in, line)){
 			if(line.find("<!-- INCLUDE SETTINGS HERE -->") != string::npos){
 				out << "\t<script src=\"./" << name << ".js\"></script>" << endl;
-			}else if((outputFormat == Potree::OutputFormat::LAS || outputFormat == Potree::OutputFormat::LAZ) && 
+			}else if((outputFormat == Potree::OutputFormat::LAS || outputFormat == Potree::OutputFormat::LAZ) &&
 				line.find("<!-- INCLUDE ADDITIONAL DEPENDENCIES HERE -->") != string::npos){
-				
+
 				out << "\t<script src=\"../libs/plasio/js/laslaz.js\"></script>" << endl;
 				out << "\t<script src=\"../libs/plasio/vendor/bluebird.js\"></script>" << endl;
 				out << "\t<script src=\"../build/js/laslaz.js\"></script>" << endl;
 			}else{
 				out << line << endl;
 			}
-			
+
 		}
 
 		in.close();
@@ -187,7 +187,7 @@ void PotreeConverter::generatePage(string name){
 		ssSettings << "\tuseEDL: false,				" << endl;
 		ssSettings << "};" << endl;
 
-	
+
 		ofstream fSettings;
 		fSettings.open(pagedir + "/examples/" + name + ".js", ios::out);
 		fSettings << ssSettings.str();
@@ -272,17 +272,17 @@ void PotreeConverter::convert(){
 
 				cout << ssMessage.str() << endl;
 			}
-			if((pointsProcessed % (10'000'000)) == 0){
+			if(false) { // (pointsProcessed % (100'000'000)) == 0){
 				cout << "FLUSHING: ";
-			
+
 				auto start = high_resolution_clock::now();
-			
+
 				writer->flush();
-			
+
 				auto end = high_resolution_clock::now();
 				long long duration = duration_cast<milliseconds>(end-start).count();
 				float seconds = duration / 1'000.0f;
-			
+
 				cout << seconds << "s" << endl;
 			}
 
@@ -293,7 +293,7 @@ void PotreeConverter::convert(){
 		reader->close();
 		delete reader;
 	}
-	
+
 	cout << "closing writer" << endl;
 	writer->flush();
 	writer->close();
@@ -304,7 +304,7 @@ void PotreeConverter::convert(){
 	auto end = high_resolution_clock::now();
 	long long duration = duration_cast<milliseconds>(end-start).count();
 
-	
+
 	cout << endl;
 	cout << "conversion finished" << endl;
 	cout << pointsProcessed << " points were processed and " << writer->numAccepted << " points ( " << percent << "% ) were written to the output. " << endl;
-- 
2.10.2

